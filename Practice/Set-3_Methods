# set.add( el ) #adds an element
collection=set()
collection.add(1)
collection.add(2)
collection.add(3)
collection.add(3) #set ignores the duplicate value
print(collection) #{1, 2, 3}

# collection=set()
# collection.add(1)
# collection.add(2)
# collection.add(3)
# collection.add("String")

# print(collection) #{1, 2, 3, 'String'}
-----------------------------------------------------
#set.remove( el ) #removes the element
collection=set()
collection.add(1)
collection.add(2)
collection.add(3)
collection.add(3)

collection.remove(1)
print(collection) #{2,3}
------------------ creating tuple ---------------
collection=set()
collection.add(1)
collection.add(2)
collection.add(3)
collection.add("String")
collection.add((1,2,3))

print(collection) #{1, 2, 3, 'String', (1, 2, 3)}
--------------- list -------
collection=set()
collection.add(1)
collection.add(2)
collection.add(3)
collection.add("String")
collection.add((1,2,3))

collection.add([1,2,3])
print(collection) 
output-->
Traceback (most recent call last):
  File "/home/main.py", line 8, in <module>
    collection.add([1,2,3])
TypeError: unhashable type: 'list'
------------length ----------
collection=set()
collection.add(1)
collection.add(2)
collection.add(3)
collection.add("String")
collection.add((1,2,3))

print(len(collection)) #5
-----------------------------------------------
# set.clear( ) #empties the set
collection=set()
collection.add(1)
collection.add(2)
collection.add(3)
collection.add("String")
collection.add((1,2,3))

collection.clear()
print(len(collection)) # 0
------------------------------------------------
# set.pop( ) #removes a random value
collection={"hello","World","this","is","Python"}
print(collection.pop())
print(collection.pop())
print(collection.pop())
--------------------------------------------------------
# set.union( set2 ) #combines both set values & returns new
set1={1,2,3}
set2={3,4,5}
# set3=set.union(set1,set2)
print(set1.union(set2)) #{1,2,3,4,5}
--------------------------------------------------------
# set.intersection( set2 ) #combines common values & returns new
set1={1,2,3}
set2={3,4,5}
# set3=set.intersection(set1,set2)
# print(set3)
print(set1.intersection(set2)) #{3}
